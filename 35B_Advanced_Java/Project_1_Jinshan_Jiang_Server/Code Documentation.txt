	*************** Assignment #2 **********************
	In this assignment, Building multiple interfaces in adapter package to help proxyauto to configure Automobile, and help to build a capsulation structure to hide all the structure about configuring the Automobile object.
	To be able to do the capsulation, the bridge that I built for the external to access the internal code, I have BuildAuto, which implements all the interfaces but has nothing in the body, and all the methods declared in the interfaces are written in proxyAuto.
	Another important goal to achieve in this assignment is to build a self-healing program. Therefore, I created a new package called Exceptions, which contains a ExceptionManager, and some helper class to dealing with different exceptions that occur in the program. After capture the exceptions, I have those helper classes to fix them; also, I have a method that will log them in to an Exceptional Log.txt file.
	To be able to easy access the exception manager, I made it managed by numbers. To illustrate that, for model package, I used 100 to 199 to represents different exceptions; and 200 to 299 to represent exceptions from util package; and so on. Using this method can be easier to manage program, and also easier to pass parameter for fixing. 
	Program is tested in Drive, a new designed main method tested the interfaces and the capsulation works, exception log created and fixing methods are all working, result is correct.

	*************** Assignment #3 **********************
	In this assignment, Option Set Array is refactored to a ArrayList<OptionSet>, and also introduced to a new element which is choice. In the class Automobile, choice is a ArrayList<Option>, it also appear in OptionSet class as a property of Option. In Class OptionSet, it has a method called SetChoice, which will return a option that is chosen as choice. And the method is called in Automobile Class to store them in a ArrayList<Option>.
	In the Class ProxyAutomobile, the Automobile instance is changed to a LinkedHashMap<String, Automobile>, and all the methods in this class is modified to checking if the brand exists, and assign this Automobile object to the method and continue the method.
	Program is tested in Drive, a new designed main method has selected choices data, and the total price method is called, and result is correct.

	*************** Assignment #4 **********************
	In this assignment, based on the goal of learning multithreading, I created a new interface, EditThread. which is the bridge of accessing the linked hash map instance in proxyAuto class from buildAuto instance.
	For classes: updateOptionPrice and updateOptionSetName methods in EditOption class are designed to be synchronized for multithreading because when working on the same instance of linked hash map, the update methods are having a chance of having conflict of operating. In Edit Option class, I designed a private boolean instance ava, to playing the role of switch, that can turn on different updating methods. 
	For assisting the EditOption, and drive class, I designed AssistDrive class in scale package as well to initialize the thread using EditOption class. The AssistDrive class implements Thread, so the threads in here can be used for synchronized methods in EditOption class. Also, in this class, it contains private instance string array for storing updating datas for both threads. And a operation number for case choosing purpose.
	Program is tested in Drive, a new method call initialized by BuildAuto instance using the Interface EditThread and the result is correct.

	*************** Assignment #5 **********************
	In this assignment, we split our old project to two, one is server and another one is the client. For building the connection, in both server and client, I have a class called DefalutSocket to set up the connection for later file communication between client and server. In the sam package, I also wrote some other assisting functions that can help socket to set up the communication and creating their own threats. And, also there are checking connection methods in the file that can helper to determine the problem and easier to solve them.
	For communication, I’ve used Objectinput and Objectoutput Stream, to assist client and server to communicate and exchange information, including files, automobile objects, strings. etc. And one of the most important object that is transferred between server and client is the Property Object (props). I assume the client will have the file source that contains the property file can configure the car. So that I have the property object that is loaded in client, but it doesn’t configure the Automobile object yet, and then, transfer it to the server. In the server, I wrote the class called ReadPropertyFile, which can parse the file and read them from the props, the Property Object that is transferred from the client end. And then, configure the car object and also insert every new car object into the LinkedHashMap.
	Program is tested in Drive, the new design of server and client ends are tested, communication successes, output as expected and result is correct. 